
import React, { Component } from 'react';
import { AllWidgetProps, DataSource } from 'jimu-core';
import { Loading } from 'jimu-ui';

interface State {
  iframeUrl: string;
  isLoading: boolean;
  selectedFeatures: any[];
}

export default class AutoEmbedWidget extends Component<AllWidgetProps<any>, State> {
  state: State = {
    iframeUrl: this.props.config?.defaultUrl || '',
    isLoading: false,
    selectedFeatures: [],
  };

  componentDidMount() {
    this.initializeDataSources();
  }

  // Initialize data sources dynamically
  initializeDataSources = () => {
    const dataSources = this.props.useDataSources;
    if (!dataSources || !dataSources.length) {
      console.warn('No data sources found.');
      return;
    }

    // Add event listeners for selection changes in each data source
    dataSources.forEach((ds) => {
      this.handleSelectionChange(ds); // Initial check for selection
    });
  };

  // Handle selection change event
  handleSelectionChange = async (ds: DataSource) => {
    this.setState({ isLoading: true });

    try {
      const selectedIds = ds.selectedIds || []; // Get selected IDs from the data source
      const features = await this.queryFeaturesByIds(selectedIds);
      const newUrl = this.generateUrl(features);
      this.setState({ iframeUrl: newUrl, isLoading: false, selectedFeatures: features });
    } catch (error) {
      console.error('Error handling selection change:', error);
      this.setState({ isLoading: false });
    }
  };

  // Query features based on their IDs
  queryFeaturesByIds = async (ids: string[]) => {
    const allFeatures: any[] = [];
    for (const ds of this.props.useDataSources) {
      const query = {
        where: `${ds.idField} IN (${ids.map(id => `'${id}'`).join(',')})`,
        outFields: ['*'],
        returnGeometry: false,
      };

      const result = await ds.query(query);
      allFeatures.push(...result.records);
    }
    return allFeatures;
  };

  // Generate URL based on selected features
  generateUrl = (features: any[]): string => {
    if (!features.length) return this.props.config?.defaultUrl || '';

    const attributes = features[0].getData(); // Use the first selected feature
    const baseUrl = this.props.config?.urlTemplate || this.props.config?.defaultUrl || '';

    return Object.entries(attributes).reduce((url, [key, value]) => {
      return url.replace(new RegExp(`{${key}}`, 'g'), encodeURIComponent(value as string));
    }, baseUrl);
  };

  render() {
    const { iframeUrl, isLoading } = this.state;

    return (
      <div className="h-100 w-100 p-2">
        {isLoading && <Loading />}
        <iframe
          src={iframeUrl}
          className="h-100 w-100 border-0"
          loading="lazy"
          title="Embedded Website"
        />
      </div>
    );
  }
}
