import * as React from "react";
import { useState, useEffect } from "react";
import { MapViewManager, DataSourceManager } from "jimu-core";

interface WidgetProps {
  // Define any required props (if needed)
}

const Widget: React.FC<WidgetProps> = (props) => {
  const [selectedFeatures, setSelectedFeatures] = useState<any[]>([]);

  // Hardcode the layer IDs and website URL
  const layerIds = ["layer_12345", "layer_67890"]; // Replace with actual Layer IDs
  const websiteURL = "https://your-website.com"; // Replace with your website URL

  // Monitor layer selections
  useEffect(() => {
    const mapViewManager = MapViewManager.getInstance();
    const mapView = mapViewManager.getActiveMapView();

    if (!mapView) {
      console.error("No active map view found!");
      return;
    }

    // Wait for the map to load
    const mapLoadHandler = mapView.watch("map", (map) => {
      if (!map) return;

      console.log("Map loaded:", map);

      // Find layers by ID
      const layers = layerIds.map((id) => {
        const layer = map.findLayerById(id);
        if (!layer) {
          console.error(`Layer with ID ${id} not found!`);
          return null;
        }
        if (layer.type !== "feature") {
          console.error(`Layer with ID ${id} is not a feature layer!`);
          return null;
        }
        return layer;
      }).filter(Boolean); // Remove null values

      console.log("Layers found:", layers);

      // Function to handle selection changes
      const handleSelectionChange = () => {
        const allSelectedFeatures = layers.flatMap((layer) => layer.selectedFeatures || []);
        setSelectedFeatures(allSelectedFeatures);
      };

      // Listen for selection changes on all layers
      const watchers = layers.map((layer) =>
        layer.watch("selectedFeatures", () => handleSelectionChange())
      );

      // Cleanup watchers on unmount
      return () => watchers.forEach((watcher) => watcher.remove());
    });

    // Cleanup map load handler on unmount
    return () => mapLoadHandler.remove();
  }, []);

  // Open website with selected features
  const openWebsite = () => {
    const featuresJSON = JSON.stringify(selectedFeatures, (key, value) => {
      if (value && typeof value === "object" && "geometry" in value) {
        return {
          attributes: value.attributes,
          geometry: value.geometry.toJSON(), // Simplify geometry
        };
      }
      return value;
    });

    const encodedFeatures = encodeURIComponent(featuresJSON);
    const urlWithFeatures = `${websiteURL}?features=${encodedFeatures}`;

    // Open the website in a new tab
    window.open(urlWithFeatures, "_blank");
  };

  return (
    <div>
      <button onClick={openWebsite} disabled={selectedFeatures.length === 0}>
        Open Website with {selectedFeatures.length} Selected Features
      </button>
    </div>
  );
};

export default Widget;
