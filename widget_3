
import * as React from 'react';
import { AllWidgetProps, DataSource, DataSourceManager, FeatureDataRecord } from 'jimu-core';
import { TextInput } from 'jimu-ui';

interface State {
  selectedFeatures: FeatureDataRecord[];
}

export default class FeatureSelectionListener extends React.PureComponent<AllWidgetProps<unknown>, State> {
  state: State = {
    selectedFeatures: []
  };

  private dataSourceSubscriptions: { [dsId: string]: () => void } = {};

  componentDidMount() {
    // Get all existing data sources
    const dsManager = DataSourceManager.getInstance();
    const allDataSources = dsManager.getDataSources();
    
    // Subscribe to initial data sources
    Object.keys(allDataSources).forEach(dsId => {
      this.subscribeToDataSource(dsId);
    });

    // Watch for new data sources (alternative approach)
    this.checkForNewDataSources();
  }

  componentWillUnmount() {
    // Clean up all subscriptions
    Object.values(this.dataSourceSubscriptions).forEach(unsubscribe => unsubscribe());
  }

  subscribeToDataSource = (dsId: string) => {
    if (this.dataSourceSubscriptions[dsId]) return;

    const ds = DataSourceManager.getInstance().getDataSource(dsId);
    if (!ds) return;

    // Store unsubscribe function
    this.dataSourceSubscriptions[dsId] = ds.onSelectionChange(() => {
      this.updateSelectedFeatures();
    });
  };

  updateSelectedFeatures = () => {
    const dsManager = DataSourceManager.getInstance();
    const allFeatures = Object.keys(this.dataSourceSubscriptions)
      .flatMap(dsId => {
        const ds = dsManager.getDataSource(dsId);
        return ds?.getSelectedRecords() || [];
      });
    
    this.setState({ selectedFeatures: allFeatures });
  };

  // Periodically check for new data sources (fallback)
  checkForNewDataSources = () => {
    const dsManager = DataSourceManager.getInstance();
    const currentDsIds = Object.keys(dsManager.getDataSources());
    
    // Find new data sources that aren't subscribed yet
    currentDsIds.forEach(dsId => {
      if (!this.dataSourceSubscriptions[dsId]) {
        this.subscribeToDataSource(dsId);
      }
    });

    // Check again after delay
    setTimeout(this.checkForNewDataSources, 1000);
  };

  render() {
    return (
      <div className="p-2">
        <h4>Selected Features:</h4>
        {this.state.selectedFeatures.map((feature, index) => (
          <div key={index} className="mb-2 p-2 border">
            <TextInput
              readOnly
              value={JSON.stringify(feature.attributes, null, 2)}
              style={{ width: '100%', minHeight: '100px' }}
            />
            {feature.feature.geometry && 
              <div className="mt-2">
                <p>Geometry:</p>
                <pre style={{ fontSize: '12px' }}>
                  {JSON.stringify(feature.feature.geometry, null, 2)}
                </pre>
              </div>
            }
          </div>
        ))}
      </div>
    );
  }
}
