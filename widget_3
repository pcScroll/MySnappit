
// CustomWidget.js (Custom Widget for Managing Shared State)
import { React, useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { appActions } from 'jimu-core';

const CustomWidget = () => {
  const dispatch = useDispatch();
  const [selectedFeature, setSelectedFeature] = useState(null);

  // Access appState to get the selected feature (if any)
  const appState = useSelector(state => state.appState);

  // Effect to listen for changes to appState and update local state
  useEffect(() => {
    if (appState?.type === 'setSelectedFeature') {
      // Update local state when the selected feature changes in appState
      setSelectedFeature(appState.payload);
    }
  }, [appState]);

  // Function to handle feature selection (could be from a map or table)
  const handleFeatureSelection = (feature) => {
    setSelectedFeature(feature);
    // Update appState with the selected feature
    dispatch(appActions.setAppState({
      type: 'setSelectedFeature',   // Custom event type
      payload: feature,             // Send feature information
    }));
  };

  return (
    <div>
      <h3>Selected Feature:</h3>
      {selectedFeature ? (
        <div>{JSON.stringify(selectedFeature)}</div>
      ) : (
        <div>No feature selected yet.</div>
      )}

      {/* Button to simulate selecting a feature */}
      <button onClick={() => handleFeatureSelection({ name: 'Sample Feature', value: '123' })}>
        Select Feature
      </button>
    </div>
  );
};

export default CustomWidget;
