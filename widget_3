

import * as React from 'react';
import { AllWidgetProps, DataSource, DataSourceComponent, FeatureDataRecord, DataSourceStatus, IMDataSourceInfo } from 'jimu-core';
import { TextInput } from 'jimu-ui';

interface State {
  selectedFeatures: FeatureDataRecord[];
}

export default class FeatureSelectionListener extends React.PureComponent<AllWidgetProps<unknown>, State> {
  state: State = {
    selectedFeatures: []
  };

  // Track all data sources in the app
  dataSources: { [dsId: string]: DataSource } = {};

  componentDidMount() {
    // Listen for data source creation
    this.props.dispatch(
      window.jimuConfig.queryWidgetIds().map(widgetId => ({
        type: 'DATA_SOURCE_CREATED',
        widgetId,
        dataSourceId: widgetId // Use widget ID to track its data source
      }))
    );
  }

  // Handle selection changes from ANY data source
  handleDataSourceUpdate = (ds: DataSource, info: IMDataSourceInfo) => {
    if (info.status === DataSourceStatus.Unloaded) return;

    // Get selected features from the data source
    const selectedFeatures = ds.getSelectedRecords();
    this.setState({ selectedFeatures });
  };

  render() {
    return (
      <div className="p-2">
        <h4>Selected Features:</h4>
        {this.state.selectedFeatures.map((feature, index) => (
          <div key={index} className="mb-2 p-2 border">
            <TextInput
              readOnly
              value={JSON.stringify(feature.attributes, null, 2)}
              style={{ width: '100%', minHeight: '100px' }}
            />
          </div>
        ))}

        {/* Listen to all data sources */}
        {Object.keys(this.dataSources).map(dsId => (
          <DataSourceComponent
            key={dsId}
            dataSourceId={dsId}
            onDataSourceInfoChange={this.handleDataSourceUpdate}
          />
        ))}
      </div>
    );
  }
}
