import * as React from "react";
import { useState, useEffect } from "react";
import { JimuMapViewComponent, JimuMapView } from "jimu-arcgis";

interface WidgetProps {
  useMapWidgetId: string; // Pass the map widget ID as a prop
}

const Widget: React.FC<WidgetProps> = (props) => {
  const [selectedFeatures, setSelectedFeatures] = useState<any[]>([]);
  const [jimuMapView, setJimuMapView] = useState<JimuMapView | null>(null);

  // Hardcode the layer IDs and website URL
  const layerIds = ["layer_12345", "layer_67890"]; // Replace with actual Layer IDs
  const websiteURL = "https://your-website.com"; // Replace with your website URL

  // Monitor layer selections
  useEffect(() => {
    if (!jimuMapView) {
      console.error("JimuMapView is not available!");
      return;
    }

    const map = jimuMapView.view.map;

    // Find layers by ID
    const layers = layerIds.map((id) => {
      const layer = map.findLayerById(id);
      if (!layer) {
        console.error(`Layer with ID ${id} not found!`);
        return null;
      }
      if (layer.type !== "map-image") {
        console.error(`Layer with ID ${id} is not a map image layer!`);
        return null;
      }
      console.log(`Layer found: ${layer.title} (ID: ${layer.id})`); // Debugging
      return layer;
    }).filter(Boolean); // Remove null values

    console.log("Layers found:", layers);

    // Function to handle selection changes
    const handleSelectionChange = async () => {
      console.log("Selection change detected!"); // Debugging

      // Query selected features from all layers
      const allSelectedFeatures = await Promise.all(
        layers.map(async (layer) => {
          const query = layer.createQuery();
          query.where = "1=1"; // Query all features (adjust as needed)
          const result = await layer.queryFeatures(query);
          console.log(`Selected features in layer ${layer.title}:`, result.features); // Debugging
          return result.features;
        })
      );

      // Flatten the array of selected features
      const flattenedFeatures = allSelectedFeatures.flat();
      setSelectedFeatures(flattenedFeatures);
    };

    // Listen for selection changes on all layers
    const watchers = layers.map((layer) => {
      console.log(`Setting up watcher for layer ${layer.title}`); // Debugging
      return layer.watch("refresh", () => {
        console.log(`Selection change in layer ${layer.title}`); // Debugging
        handleSelectionChange();
      });
    });

    // Cleanup watchers on unmount
    return () => watchers.forEach((watcher) => watcher.remove());
  }, [jimuMapView]);

  // Open website with selected features
  const openWebsite = () => {
    const featuresJSON = JSON.stringify(selectedFeatures, (key, value) => {
      if (value && typeof value === "object" && "geometry" in value) {
        return {
          attributes: value.attributes,
          geometry: value.geometry.toJSON(), // Simplify geometry
        };
      }
      return value;
    });

    const encodedFeatures = encodeURIComponent(featuresJSON);
    const urlWithFeatures = `${websiteURL}?features=${encodedFeatures}`;

    // Open the website in a new tab
    window.open(urlWithFeatures, "_blank");
  };

  return (
    <div>
      {/* Use JimuMapViewComponent to get the active map view */}
      <JimuMapViewComponent
        useMapWidgetId={props.useMapWidgetId} // Pass the map widget ID as a prop
        onActiveViewChange={(view) => {
          console.log("JimuMapView initialized:", view); // Debugging
          setJimuMapView(view);
        }}
      />
      <button onClick={openWebsite} disabled={selectedFeatures.length === 0}>
        Open Website with {selectedFeatures.length} Selected Features
      </button>
    </div>
  );
};

export default Widget;
