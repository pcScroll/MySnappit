
import * as React from 'react';
import { AllWidgetProps, DataSource, DataSourceManager, FeatureDataRecord, IMDataSourceInfo } from 'jimu-core';
import { TextInput } from 'jimu-ui';

interface State {
  selectedFeatures: FeatureDataRecord[];
}

export default class FeatureSelectionListener extends React.PureComponent<AllWidgetProps<unknown>, State> {
  state: State = {
    selectedFeatures: []
  };

  private dataSources: { [dsId: string]: DataSource } = {};
  private selectionUnsubscribers: { [dsId: string]: () => void } = {};

  componentDidMount() {
    const dsManager = DataSourceManager.getInstance();
    
    // Listen for data source changes using proper event listener methods
    dsManager.addListener('dataSourceCreated', this.handleDataSourceCreated);
    dsManager.addListener('dataSourceDestroyed', this.handleDataSourceDestroyed);

    // Initialize existing data sources
    Object.entries(dsManager.getDataSources()).forEach(([dsId, ds]) => {
      this.handleDataSourceCreated(dsId);
    });
  }

  componentWillUnmount() {
    const dsManager = DataSourceManager.getInstance();
    
    // Properly remove listeners using removeListener
    dsManager.removeListener('dataSourceCreated', this.handleDataSourceCreated);
    dsManager.removeListener('dataSourceDestroyed', this.handleDataSourceDestroyed);

    // Clean up all selection listeners
    Object.values(this.selectionUnsubscribers).forEach(unsubscribe => unsubscribe());
  }

  handleDataSourceCreated = (dsId: string) => {
    const ds = DataSourceManager.getInstance().getDataSource(dsId);
    if (!ds || this.selectionUnsubscribers[dsId]) return;

    // Store the unsubscribe function
    this.selectionUnsubscribers[dsId] = ds.onSelectionChange(() => {
      this.updateSelectedFeatures(dsId);
    });

    this.dataSources[dsId] = ds;
    this.updateSelectedFeatures(dsId);
  };

  handleDataSourceDestroyed = (dsId: string) => {
    if (this.selectionUnsubscribers[dsId]) {
      this.selectionUnsubscribers[dsId]();
      delete this.selectionUnsubscribers[dsId];
    }
    delete this.dataSources[dsId];
  };

  updateSelectedFeatures = (dsId: string) => {
    const ds = this.dataSources[dsId];
    const selected = ds?.getSelectedRecords() || [];
    this.setState(prevState => ({
      selectedFeatures: [...prevState.selectedFeatures, ...selected]
    }));
  };

  render() {
    return (
      <div className="p-2">
        <h4>Selected Features:</h4>
        {this.state.selectedFeatures.map((feature, index) => (
          <div key={index} className="mb-2 p-2 border">
            <TextInput
              readOnly
              value={JSON.stringify(feature.attributes, null, 2)}
              style={{ width: '100%', minHeight: '100px' }}
            />
            {feature.feature.geometry && 
              <div className="mt-2">
                <p>Geometry:</p>
                <pre style={{ fontSize: '12px' }}>
                  {JSON.stringify(feature.feature.geometry, null, 2)}
                </pre>
              </div>
            }
          </div>
        ))}
      </div>
    );
  }
}
