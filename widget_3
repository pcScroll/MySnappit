
import * as React from 'react';
import { AllWidgetProps, DataSource, DataSourceManager, FeatureDataRecord, DataSourceComponent } from 'jimu-core';
import { TextInput } from 'jimu-ui';

interface State {
  dataSourceIds: string[];
  selectedFeatures: FeatureDataRecord[];
}

export default class FeatureSelectionListener extends React.PureComponent<AllWidgetProps<unknown>, State> {
  state: State = {
    dataSourceIds: [],
    selectedFeatures: []
  };

  private checkInterval: number;

  componentDidMount() {
    // Initial data source check
    this.updateDataSourceList();
    
    // Set up periodic checks for new data sources
    this.checkInterval = window.setInterval(() => {
      this.updateDataSourceList();
    }, 1000);
  }

  componentWillUnmount() {
    clearInterval(this.checkInterval);
  }

  updateDataSourceList = () => {
    const dsManager = DataSourceManager.getInstance();
    const newIds = Object.keys(dsManager.getDataSources());
    
    if (newIds.length !== this.state.dataSourceIds.length || 
        !newIds.every((id, index) => id === this.state.dataSourceIds[index])) {
      this.setState({ dataSourceIds: newIds });
    }
  };

  handleDataSourceInfoChange = (ds: DataSource, info: { status: string }) => {
    if (info.status === 'LOADED') {
      const selected = ds.getSelectedRecords();
      this.setState(prevState => ({
        selectedFeatures: [...prevState.selectedFeatures, ...selected]
      }));
    }
  };

  render() {
    return (
      <div className="p-2">
        <h4>Selected Features:</h4>
        
        {/* Render DataSourceComponent for each existing data source */}
        {this.state.dataSourceIds.map(dsId => (
          <DataSourceComponent
            key={dsId}
            dataSourceId={dsId}
            onDataSourceInfoChange={(ds, info) => this.handleDataSourceInfoChange(ds, info)}
            widgetId={this.props.id}
          />
        ))}

        {/* Display selected features */}
        {this.state.selectedFeatures.map((feature, index) => (
          <div key={index} className="mb-2 p-2 border">
            <TextInput
              readOnly
              value={JSON.stringify(feature.attributes, null, 2)}
              style={{ width: '100%', minHeight: '100px' }}
            />
            {feature.feature.geometry && 
              <div className="mt-2">
                <p>Geometry:</p>
                <pre style={{ fontSize: '12px' }}>
                  {JSON.stringify(feature.feature.geometry, null, 2)}
                </pre>
              </div>
            }
          </div>
        ))}
      </div>
    );
  }
}
