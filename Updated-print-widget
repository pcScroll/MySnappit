import React from 'react'
import { type AllWidgetProps, getAppStore, type IMAppConfig } from 'jimu-core'
import { MapViewManager } from 'jimu-arcgis'
import { Button } from 'jimu-ui'
import { FiPrinter } from 'react-icons/fi'
import html2canvas from 'html2canvas'
import { jsPDF } from 'jspdf'

const widget = (props: AllWidgetProps<any>) => {
  const captureAndDownloadPDF = () => {
    let mapWidgetDiv: any
    const appconfig: IMAppConfig = getAppStore().getState().appConfig

    if (!appconfig) {
      printbody()
    } else {
      const mapviewManager = MapViewManager.getInstance()
      const lstmapViews = mapviewManager.getAllJimuMapViews()

      if (lstmapViews.length > 0) {
        lstmapViews[0].view.takeScreenshot().then((screenshot: any) => {
          const mapImageUrl = screenshot.dataUrl
          replaceMapWithImg(mapImageUrl, '.arcgis-map')
          printbody()
        })
      } else {
        printbody()
      }
    }

    function replaceMapWithImg(mapImage: string, widgetId: string): void {
      mapWidgetDiv = document.querySelector(widgetId) as HTMLElement
      if (!mapWidgetDiv) {
        console.error(`No Element found with widgetId ${widgetId}`)
        return
      }

      const imgElement = document.createElement('img')
      imgElement.src = mapImage
      imgElement.id = 'TempMapImg'
      imgElement.style.width = `${mapWidgetDiv.offsetWidth}px`
      imgElement.style.height = `${mapWidgetDiv.offsetHeight}px`

      const parent = mapWidgetDiv.parentNode as HTMLElement
      parent.replaceChild(imgElement, mapWidgetDiv)
    }

    function printbody(): void {
      const body = document.body
      const scrollX = window.scrollX || 0
      const scrollY = window.scrollY || 0
      const now = new Date()
      const dateString = now.toISOString().replace(/[-T:\.Z]/g, '')

      html2canvas(body, {
        useCORS: true,
        scrollX,
        scrollY,
        width: document.documentElement.scrollWidth - 10,
        height: document.documentElement.scrollHeight - 10,
        x: 5,
        y: 5,
        scale: 3,
        backgroundColor: 'transparent'
      }).then((canvas) => {
        const imgData = canvas.toDataURL('image/jpeg', 0.8)

        const imgWidth = canvas.width
        const imgHeight = canvas.height

        // **Determine the best orientation**
        const pageWidth = 297 // A4 Landscape width
        const pageHeight = 210 // A4 Landscape height

        let orientation: 'p' | 'l' = imgWidth > imgHeight ? 'l' : 'p'

        // **Ensure the image scales properly to fit within A4 dimensions**
        const maxWidth = orientation === 'l' ? pageWidth - 10 : 210 - 10
        const maxHeight = orientation === 'l' ? pageHeight - 10 : 297 - 10

        let scaledWidth = imgWidth
        let scaledHeight = imgHeight

        // Scale the image to fit within A4 dimensions while maintaining aspect ratio
        const scaleFactor = Math.min(maxWidth / imgWidth, maxHeight / imgHeight)

        scaledWidth *= scaleFactor
        scaledHeight *= scaleFactor

        const doc = new jsPDF({
          orientation,
          unit: 'mm',
          format: 'a4'
        })

        doc.addImage(imgData, 'JPEG', 5, 5, scaledWidth, scaledHeight)

        const filename = `map_${dateString}.pdf`

        const imgElement = document.getElementById('TempMapImg') as HTMLImageElement
        if (imgElement) {
          const parent = imgElement.parentNode as HTMLElement
          parent.replaceChild(mapWidgetDiv, imgElement)
        }
        doc.save(filename)
      }).catch((error) => {
        console.error('Error capturing image:', error)
      })
    }
  }

  return (
    <div className="widget-demo jimu-widget m-2">
      <Button onClick={captureAndDownloadPDF}> <FiPrinter size={32} /></Button>
    </div>
  )
}

export default widget
